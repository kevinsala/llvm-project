//===- Transforms/Instrumentation/InstrumentorConfig.def ------------------===//
//
// Part of the LLVM Project, under the Apache License v2.0 with LLVM Exceptions.
// See https://llvm.org/LICENSE.txt for license information.
// SPDX-License-Identifier: Apache-2.0 WITH LLVM-exception
//
//===----------------------------------------------------------------------===//
//
//===----------------------------------------------------------------------===//

// No include guards

/// Base configuration
///{
SECTION_START(Base, InstrumentorConfig::NONE)

/// The base name which defines the runtime call names, i.a.,
/// <BaseName><instruction/location>(...)
CVALUE(Base, std::string, RuntimeName, "__instrumentor_")

/// Print the signatures of all used runtime functions.
CVALUE(Base, bool, PrintRuntimeSignatures, true)

CVALUE(Base, std::string, StubRuntimePath, "rt.c")

SECTION_END(Base)
///}

/// AllocaInst
///{
SECTION_START(alloca, InstrumentorConfig::POST)

/// Selection of information passed to the runtime.
///{
/// The actual allocated pointer.
RTVALUE(alloca, Value, true, "void*", REPLACABLE_POST)
/// The size of the entire allocation.
RTVALUE(alloca, AllocationSize, true, "int64_t", PLAIN)
/// The minimal alignment requested statically.
RTVALUE(alloca, Alignment, true, "int64_t", PLAIN)
///}

/// Should the value be replaced by the runtime call result.
CVALUE(alloca, bool, ReplaceValue, true)

/// Optional callback, see CallbackTy.
CVALUE_INTERNAL(alloca, CallbackTy, CB, nullptr)

SECTION_END(alloca)
///}

/// StoreInst
///{
SECTION_START(store, InstrumentorConfig::PRE)

/// Selection of information passed to the runtime.
///{
/// The pointer operand.
RTVALUE(store, PointerOperand, true, "void*", REPLACABLE_PRE)
/// The pointer operand address space.
RTVALUE(store, PointerOperandAddressSpace, true, "int32_t", PLAIN)
/// The value operand, passed as 64-bit integer.
RTVALUE(store, ValueOperand, true, "int64_t", POTENTIALLY_INDIRECT)
/// The value operand size.
RTVALUE(store, ValueOperandSize, true, "int64_t", PLAIN)
/// The value operand type id.
RTVALUE(store, ValueOperandTypeId, true, "int32_t", TYPE_ID)
/// The minimal alignment requested statically.
RTVALUE(store, Alignment, true, "int64_t", PLAIN)
/// The atomicity ordering.
RTVALUE(store, AtomicityOrdering, true, "int32_t", PLAIN)
/// The sync cope id.
RTVALUE(store, SyncScopeId, true, "int8_t", PLAIN)
/// The volatile flag.
RTVALUE(store, IsVolatile, true, "int8_t", BOOLEAN)
/// The pointer base info. See BasePointer.
RTVALUE(store, BasePointerInfo, true, "void*", PLAIN)
///}

/// Should the pointer operand be replaced by the runtime call result.
CVALUE(store, bool, ReplacePointerOperand, true)

/// Skip instrumenting stores that are known to be safe at compile time.
CVALUE(store, bool, SkipSafeAccess, false)

/// Optional callback, see CallbackTy.
CVALUE_INTERNAL(store, CallbackTy, CB, nullptr)

SECTION_END(store)
///}

/// LoadInst
///{
SECTION_START(load, InstrumentorConfig::PRE_AND_POST)

/// Selection of information passed to the runtime.
///{
/// The pointer operand.
RTVALUE(load, PointerOperand, true, "void*", REPLACABLE_PRE)
/// The pointer operand address space.
RTVALUE(load, PointerOperandAddressSpace, true, "int32_t", PLAIN)
/// The loaded value, passed as 64-bit integer.
RTVALUE(load, Value, true, "int64_t", REPLACABLE_POST | POTENTIALLY_INDIRECT | POST_ONLY)
/// The value size.
RTVALUE(load, ValueSize, true, "int64_t", PLAIN)
/// The value type id.
RTVALUE(load, ValueTypeId, true, "int32_t", TYPE_ID)
/// The minimal alignment requested statically.
RTVALUE(load, Alignment, true, "int64_t", PLAIN)
/// The atomicity ordering.
RTVALUE(load, AtomicityOrdering, true, "int32_t", PLAIN)
/// The sync cope id.
RTVALUE(load, SyncScopeId, true, "int8_t", PLAIN)
/// The volatile flag.
RTVALUE(load, IsVolatile, true, "int8_t", BOOLEAN)
/// The pointer base info. See BasePointer.
RTVALUE(load, BasePointerInfo, true, "void*", PLAIN)
///}

/// Should the pointer operand be replaced by the runtime call result.
CVALUE(load, bool, ReplacePointerOperand, true)

/// Should the value be replaced by the runtime call result.
CVALUE(load, bool, ReplaceValue, true)

/// Skip instrumenting loads that are known to be safe at compile time.
CVALUE(load, bool, SkipSafeAccess, false)

/// Optional callback, see CallbackTy.
CVALUE_INTERNAL(load, CallbackTy, CB, nullptr)

SECTION_END(load)
///}

/// AllocationCall
///{
SECTION_START(allocation_call, InstrumentorConfig::POST)

/// Selection of information passed to the runtime.
///{
/// The allocation result, passed as void *.
RTVALUE(allocation_call, MemoryPointer, true, "void*", REPLACABLE_POST)
/// The allocation memory size.
RTVALUE(allocation_call, MemorySize, true, "int64_t", PLAIN)
/// The minimal alignment requested statically.
RTVALUE(allocation_call, Alignment, true, "int64_t", PLAIN)
/// The allocation family, passed as a C string.
RTVALUE(allocation_call, Family, true, "void*", STRING)
/// The initial allocation value: 0 for zeros, 1 for undef, or -1 if unknown.
RTVALUE(allocation_call, InitializerKind, true, "int8_t", INITIALIZER_KIND)
///}

/// Should the value be replaced by the runtime call result.
CVALUE(allocation_call, bool, ReplaceValue, true)

/// Optional callback, see CallbackTy.
CVALUE_INTERNAL(allocation_call, CallbackTy, CB, nullptr)

SECTION_END(allocation_call)
///}

/// MemoryIntrinsic
///{
SECTION_START(memory_intrinsic, InstrumentorConfig::PRE_AND_POST)

/// Selection of information passed to the runtime.
///{
/// The kind identifier (memset, memset_inline, ...)
RTVALUE(memory_intrinsic, KindId, true, "int32_t", PLAIN)
/// The destination pointer.
RTVALUE(memory_intrinsic, DestinationPointer, true, "void*", PLAIN)
/// The destination pointer address space.
RTVALUE(memory_intrinsic, DestinationPointerAddressSpace, true, "int32_t", PLAIN)
/// The source pointer.
RTVALUE(memory_intrinsic, SourcePointer, true, "void*", PLAIN)
/// The source pointer address space.
RTVALUE(memory_intrinsic, SourcePointerAddressSpace, true, "int32_t", PLAIN)
/// The memset value.
RTVALUE(memory_intrinsic, MemsetValue, true, "int64_t", PLAIN)
/// The length of the operation in bytes.
RTVALUE(memory_intrinsic, Length, true, "int64_t", PLAIN)
/// The volatile flag.
RTVALUE(memory_intrinsic, IsVolatile, true, "int8_t", BOOLEAN)
/// The atomic element size.
RTVALUE(memory_intrinsic, AtomicElementSize, true, "int32_t", PLAIN)
///}

/// Should the value be replaced by the runtime call result.
CVALUE(memory_intrinsic, bool, ReplaceValue, true)

/// Optional callback, see CallbackTy.
CVALUE_INTERNAL(memory_intrinsic, CallbackTy, CB, nullptr)

SECTION_END(memory_intrinsic)
///}

/// GeneralIntrinsic
///{
SECTION_START(intrinsic, InstrumentorConfig::PRE)

/// Selection of information passed to the runtime.
///{
/// The kind identifier (trap, ...)
RTVALUE(intrinsic, KindId, true, "int32_t", PLAIN)
///}

/// Optional callback, see CallbackTy.
CVALUE_INTERNAL(intrinsic, CallbackTy, CB, nullptr)

SECTION_END(intrinsic)
///}

/// Unreachable
///{
SECTION_START(unreachable, InstrumentorConfig::PRE)

/// Optional callback, see CallbackTy.
CVALUE_INTERNAL(unreachable, CallbackTy, CB, nullptr)

SECTION_END(unreachable)
///}

/// GlobalVariable
///{
SECTION_START(global_var, InstrumentorConfig::POST)

/// Selection of information passed to the runtime.
///{
/// The pointer to the global variable.
RTVALUE(global_var, Value, true, "void*", REPLACABLE_POST)
/// The size of the global variable.
RTVALUE(global_var, Size, true, "int64_t", PLAIN)
/// The minimal alignment requested statically.
RTVALUE(global_var, Alignment, true, "int64_t", PLAIN)
/// Whether the global variable is constant.
RTVALUE(global_var, IsConstant, true, "int8_t", BOOLEAN)
/// The value of the unnamed address attribute.
RTVALUE(global_var, UnnamedAddress, true, "int8_t", PLAIN)
/// The name of the global variable.
RTVALUE(global_var, Name, true, "void*", STRING)
/// The initializer kind of the global variable.
RTVALUE(global_var, InitializerKind, true, "int8_t", INITIALIZER_KIND)
///}

/// Should the value be replaced by the runtime call result.
CVALUE(global_var, bool, ReplaceValue, true)

/// Skip instrumenting declarations of global variables. Declarations of global
/// variables whose definitions are instrumented in other modules may still be
/// instrumented in the current module.
CVALUE(global_var, bool, SkipDeclaration, false)

/// Optional callback, see GlobalCallbackTy.
CVALUE_INTERNAL(global_var, GlobalCallbackTy, CB, nullptr)

SECTION_END(global_var)
///}

/// Module
///{
SECTION_START(module, InstrumentorConfig::PRE_AND_POST)

/// Selection of information passed to the runtime.
///{
/// The name of the module.
RTVALUE(module, ModuleName, true, "void*", STRING)
/// The target triple of the module.
RTVALUE(module, ModuleTargetTriple, true, "void*", STRING)
///}

SECTION_END(module)
///}

/// MainFunction
///{
SECTION_START(main_function, InstrumentorConfig::PRE_AND_POST)

/// Selection of information passed to the runtime.
///{
/// The pointers to the main arguments.
RTVALUE(main_function, ArgC, true, "int32_t", POTENTIALLY_INDIRECT | REPLACABLE_PRE | REPLACABLE_POST)
/// The pointers to the main arguments.
RTVALUE(main_function, ArgV, true, "void*", POTENTIALLY_INDIRECT | REPLACABLE_PRE | REPLACABLE_POST)
/// The value returned by the main function.
RTVALUE(main_function, ReturnValue, true, "int32_t", REPLACABLE_POST | POST_ONLY)
///}

/// Should the argument value be replaced by the runtime call result.
CVALUE(main_function, bool, ReplaceArgumentValues, true)

/// Should the return value be replaced by the runtime call result.
CVALUE(main_function, bool, ReplaceReturnValue, true)

/// Optional callback, see GlobalCallbackTy.
CVALUE_INTERNAL(main_function, GlobalCallbackTy, CB, nullptr)

SECTION_END(main_function)
///}

/// Call
///{
SECTION_START(call, InstrumentorConfig::PRE_AND_POST)

/// Selection of information passed to the runtime.
///{
/// The callee ptr.
RTVALUE(call, CalleePtr, true, "void*", PLAIN)
/// The callee name.
RTVALUE(call, CalleeName, true, "void*", STRING)
/// The argument values.
RTVALUE(call, Values, true, "void*", PRE_ONLY)
/// The argument value sizes.
RTVALUE(call, ValueSizes, true, "void*", PRE_ONLY)
/// The argument value type ids.
RTVALUE(call, ValueTypeIds, true, "void*", TYPE_ID | PRE_ONLY)
/// The number of arguments.
RTVALUE(call, NumValues, true, "int32_t", PRE_ONLY)
///}

/// Should the values be replaced.
CVALUE(call, bool, ReplaceValues, true)

/// Skip instrumenting calls to functions that are defined and instrumented in
/// the current module.
CVALUE(call, bool, SkipInstrumentedLocally, false)

/// Skip instrumenting calls to functions that are defined and instrumented in
/// other modules.
CVALUE(call, bool, SkipInstrumentedExternally, false)

/// Skip passing arguments that are not pointers and pointers that were not
/// originated by a runtime call via replacement.
CVALUE(call, bool, OnlyReplacedPointerValues, false)

SECTION_END(call)
///}

/// BasePointer
///{
SECTION_START(base_pointer, InstrumentorConfig::POST)

/// Selection of information passed to the runtime.
///{
/// The base pointer.
RTVALUE(base_pointer, Value, true, "void*", REPLACABLE_POST)
///}

/// Skip instrumenting base pointers whose PointerInfo are not used by any Load
/// or Store.
CVALUE(base_pointer, bool, SkipUnused, true)

SECTION_END(base_pointer)
///}

#undef SECTION_START
#undef CVALUE
#undef CVALUE_INTERNAL
#undef RTVALUE
#undef SECTION_END
